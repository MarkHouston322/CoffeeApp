server:
  port: 9020

spring:
  application:
    name: "employees"
  config:
    import: "optional:configserver:http://localhost:8071/"
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
  cloud:
    function:
      definition: getRevenue;getEmployee
    stream:
      bindings:
        getRevenue-in-0:
          destination: send-revenue
          group: ${spring.application.name}
        getEmployee-in-0:
          destination: send-employee
          group: ${spring.application.name}

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

  kafka:
    bootstrap-servers: localhost:9092

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: "http://localhost:8070/eureka/"

info:
  app:
    name: "employees"
    description: "Employees service"
    version: "1.0.0"

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true


logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    org.springframework.amqp: debug
    org.springframework.amqp.rabbit: debug
    com.rabbitmq: debug