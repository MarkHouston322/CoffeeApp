server:
  port: 8090

spring:
  application:
    name: "selling"
  config:
    import: "optional:configserver:http://localhost:8071/"
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
  cloud:
    function:
      definition: getGood;sellConfirmation;getCustomer;purchaseConfirmation;getSession
    stream:
      bindings:
        getGood-in-0:
          destination: send-good
          group: ${spring.application.name}
        sellGood-out-0:
          destination: sell-good
        sellConfirmation-in-0:
          destination: sell-confirmation
          group: ${spring.application.name}
        getCustomer-in-0:
          destination: send-customer
          group: ${spring.application.name}
        customerPurchase-out-0:
          destination: send-purchase
        purchaseConfirmation-in-0:
          destination: purchase-confirmation
          group: ${spring.application.name}
        sendPayment-out-0:
          destination: send-payment
        getSession-in-0:
          destination: send-session
          group: ${spring.application.name}
          content-type: application/json
        sendRevenue-out-0:
          destination: send-revenue

  kafka:
    bootstrap-servers: localhost:9092


  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

  cache:
    type: redis
    cache-names:
      - drinks
      - customers
      - session
    redis:
      cache-null-values: false

  data:
    redis:
      port: 6379
      host: localhost




eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: "http://localhost:8070/eureka/"

info:
  app:
    name: "selling"
    description: "Selling service"
    version: "1.0.0"

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true


logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    org:
      springframework:
        data:
          redis: debug
    io:
      lettuce:
        core: debug
    org.springframework.amqp: debug
    org.springframework.amqp.rabbit: debug
    com.rabbitmq: debug
    org.apache.kafka: debug
    org.springframework.kafka: trace